package src;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
//import java.util.regex.Matcher;
//import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class Workbench extends javax.swing.JFrame {

    public Socket cl;
    public String host;
    public int port;
    
    // Connection status
    public int status = 0;
    
    // Input and Output streams
    public ObjectOutputStream oos;
    public ObjectInputStream ois;
    
    // Constants for petitions
    final int CLOSE_CONNECTION = -1;
    final int CREATE_DATABASE = 0;
    final int DROP_DATABASE = 1;
    final int USE_DATABASE = 2;
    final int CREATE_TABLE = 3;
    final int DROP_TABLE = 4;
    final int INSERT = 5;
    final int SHOW_DATABASES = 6;
    final int SHOW_TABLES = 7;
    final int UPDATE = 8;
    final int DELETE = 9;
    final int SELECT = 10;
    final int UNKNOWN_PETITION = 11;
    final int SUCCESS = 0;
    final int FAILURE = 1;
    
    String currentDatabase;
    
    /* Not the correct patterns, but are not that complex for simplicity */
    /*
    final Pattern p1 = Pattern.compile("create database ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*;");
    final Pattern p2 = Pattern.compile("drop database ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*;");
    final Pattern p3 = Pattern.compile("use ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*;");
    final Pattern p4 = Pattern.compile("create table ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*( )?\\(( |[a-z]|[A-Z]|[0-9]|_|,|\\(|\\))+\\);");
    final Pattern p5 = Pattern.compile("drop table ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*;");
    final Pattern p6 = Pattern.compile("insert into ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])* values( )?\\(( |'|[a-z]|[A-Z]|[0-9]|_|,|.|@)+\\);");
    final Pattern p7 = Pattern.compile("show databases;");
    final Pattern p8 = Pattern.compile("show tables;");
    final Pattern p9 = Pattern.compile("update ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])* set ([a-z]|[A-Z]|[0-9]|_)+=('|[a-z]|[A-Z]|[0-9]|_|.)+;");
    final Pattern p10 = Pattern.compile("delete from ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])* where ([a-z]|[A-Z]|[0-9]|_)+=('|[a-z]|[A-Z]|[0-9]|_|.)+;");
    final Pattern p11 = Pattern.compile("select \\* from ([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*;");
    */
    
    /**
     * Constructor of the Workbench class.
     **/
    public Workbench(String host, int port) {
        
        this.host = host;
        this.port = port;
        initComponents();
        setIcon();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        scriptArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventsLogArea = new javax.swing.JTextArea();
        clearEventLogButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        databasesTree = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        caretPositionLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        runCurrentLineMenuItem = new javax.swing.JMenuItem();
        runAllMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Workbench");
        setMinimumSize(new java.awt.Dimension(800, 450));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scriptArea.setColumns(20);
        scriptArea.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        scriptArea.setRows(5);
        scriptArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        scriptArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                scriptAreaCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(scriptArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 600, 270));

        eventsLogArea.setEditable(false);
        eventsLogArea.setColumns(20);
        eventsLogArea.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        eventsLogArea.setRows(5);
        eventsLogArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jScrollPane2.setViewportView(eventsLogArea);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 600, 80));

        clearEventLogButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clearEventLogButton.setText("Clear");
        clearEventLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEventLogButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearEventLogButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 410, -1, -1));

        databasesTree.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jScrollPane3.setViewportView(databasesTree);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 160, 430));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Events log");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 310, -1, -1));

        caretPositionLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        caretPositionLabel.setText("Line: 0 Col: 0");
        getContentPane().add(caretPositionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, -1, -1));

        jMenu1.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        saveAsMenuItem.setText("Save As");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");

        runCurrentLineMenuItem.setText("Run Current Line");
        runCurrentLineMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCurrentLineMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(runCurrentLineMenuItem);

        runAllMenuItem.setText("Run All");
        runAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runAllMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(runAllMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function clears the Event Log text area in order to remove old
     * logs.
     **/
    private void clearEventLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEventLogButtonActionPerformed
        
        eventsLogArea.setText("");
        
    }//GEN-LAST:event_clearEventLogButtonActionPerformed

    /**
     * This function saves the script in the Script Text Area to a file using a
     * File Chooser.
     **/
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        
        try {
            
            JFileChooser jfc = new JFileChooser();
            jfc.setDialogTitle("Open SQL Script");
        
            if(jfc.showSaveDialog(this) != JFileChooser.APPROVE_OPTION)
                return; 
            
            String filename = jfc.getSelectedFile().toString();
            String f = jfc.getSelectedFile().getName();
            if(f.length() < 5){
            
                JOptionPane.showMessageDialog(this, "Invalid filename.", "Error saving file", JOptionPane.ERROR_MESSAGE);
                return;
            
            }
            if(!f.endsWith(".sql")){
            
                JOptionPane.showMessageDialog(this, "File extension not supported.", "Error saving file", JOptionPane.ERROR_MESSAGE);
                return;
            
            }
            
            PrintWriter pw = new PrintWriter(filename);
            pw.write(scriptArea.getText());
            pw.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    /**
     * This function updates the position of the caret in the Script Text Area,
     * showing the current position of the caret in the caretPositionLabel.
     **/
    private void scriptAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_scriptAreaCaretUpdate
        
        try {
            
            // Get the Caret Position
            int cpos = scriptArea.getCaretPosition();
            // Get the line in which is the caret at
            int lineNum = scriptArea.getLineOfOffset(cpos);
            // Get the column number of the current line
            int colNum = cpos - scriptArea.getLineStartOffset(lineNum);
            // Update the position in the label
            caretPositionLabel.setText("Line: "+(lineNum+1)+" Col: "+colNum);

        } catch(Exception e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_scriptAreaCaretUpdate

    /**
     * This function executes a Python script which is used for check the 
     * SQL syntax of the instructions using PLY (Python Lex and Yacc).
     **/
    public int checkSyntaxWithPLY(String petition, String param){
        try{
            
            // Arguments for the console
            String[] console = new String[5];
            console[0] = "python"; 
            console[1] = "SQL-Parser/sql_analyzer.py";
            console[2] = "1";
            console[3] = petition;
            console[4] = param;
            
            // Create the command string for the process
            //System.out.println("python SQL-Parser/sql_analyzer.py 1 '"+petition+"' "+param);
            
            // Execute the process
            Process p = Runtime.getRuntime().exec(console);
        
            // Read the returned value by the Python Script
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String s = in.readLine();
            int ret = new Integer(s).intValue();
            //System.out.println("Returned value is : "+ret);
            return ret;
            
        }catch(Exception e){
            e.printStackTrace();
        }
        return UNKNOWN_PETITION;
    }
    
    /**
     * This function execute all the instructions in the Script Text Area, whose
     * are sent to the Server and evaluated.
     **/
    private void runAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runAllMenuItemActionPerformed
        runAllMenuItem.setEnabled(false);
        runCurrentLineMenuItem.setEnabled(false);
        String script = scriptArea.getText();
        
        // Check if the Script Text Area is not empty
        if(script.isEmpty()){
            eventsLogArea.append("No instructions to execute.\n");                                           
            runAllMenuItem.setEnabled(true);
            runCurrentLineMenuItem.setEnabled(true);
            return;
        }
        
        // Split petitions by ;
        String[] petitions = script.split(";");
        
        for(String petition : petitions){
            
            // Add the ";" lost from the split
            // Remove line breaks an tabulators 
            petition = petition.replaceAll("\\r|\\n|\\t", "");// Ignore empty strings 
            
            // Ignore empty strings 
            if(petition.isEmpty()){
                continue;
            }
            petition = petition+";";
            sendPetition(petition);
            
        }  
        
        runAllMenuItem.setEnabled(true);
        runCurrentLineMenuItem.setEnabled(true);
    }//GEN-LAST:event_runAllMenuItemActionPerformed

    /**
     * This function ask to the user if he really wants to close the
     * application.
     **/
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        if (JOptionPane.showConfirmDialog(this, 
            "Are you sure you to close Workbench?", "Alert", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            closeConnection();
            System.exit(0);
            
        }
        
    }//GEN-LAST:event_formWindowClosing

    
    /**
     * This function ask to the user if he really wants to close the
     * application.
     **/
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        
        if (JOptionPane.showConfirmDialog(this, 
            "Are you sure you to close Workbench?", "Alert", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            
            closeConnection();
            System.exit(0);
        }
        
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * This functions loads the content of a .sql file to the Script Text Area.
     **/
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
      
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Open SQL Script");
        
        if(jfc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        File file = jfc.getSelectedFile();
        String filename = file.getName();
        
        if(!filename.endsWith(".sql")){
            
            JOptionPane.showMessageDialog(this, "File extension not supported.", "Error loading file", JOptionPane.ERROR_MESSAGE);
            return;
            
        }
        
        StringBuilder fileContents = new StringBuilder((int)file.length());
        Scanner scanner;
        try {
            scanner = new Scanner(file);
            String lineSeparator = System.getProperty("line.separator");
            
            while(scanner.hasNextLine()) {
                fileContents.append(scanner.nextLine()).append(lineSeparator);
            }
            
            scanner.close();
            String script = fileContents.toString();
            scriptArea.setText(script);
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Workbench.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    /**
     * This function does actually the same than the runAll function, but this
     * is only for a single line, which is the one that the caret is at.
     **/
    private void runCurrentLineMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCurrentLineMenuItemActionPerformed
                                                      
        runAllMenuItem.setEnabled(false);
        runCurrentLineMenuItem.setEnabled(false);
        
        String script = scriptArea.getText();
        
        // Check if the Script Text Area is not empty
        if(script.isEmpty()){
            eventsLogArea.append("No instructions to execute.\n");                                              
            runAllMenuItem.setEnabled(true);
            runCurrentLineMenuItem.setEnabled(true);
            return;
        }
        
        String[] petitions = script.split("\n");
        // Get the Caret Position
        int cpos = scriptArea.getCaretPosition();
        
        try {
            
            // Get the line in which is the caret at
            int lineNum = scriptArea.getLineOfOffset(cpos);
            String petition = petitions[lineNum];
            petition = petition.replaceAll("\\r|\\n|\\t", "");
            sendPetition(petition);
            
        } catch (BadLocationException e) {
            
        }    
        
        runAllMenuItem.setEnabled(true);
        runCurrentLineMenuItem.setEnabled(true);
        
    }//GEN-LAST:event_runCurrentLineMenuItemActionPerformed

    /**
     * This function send a petition to the server, which is previously matched
     * with all the supported regular expression for this simple Database 
     * Manager.
     **/
    public void sendPetition(String petition){
        
        try{
            String instruction;
            String param;
            if(petition.length()>12)
                instruction = petition.substring(0,12);
            else
                instruction = "";
            int previous_check = previousCheck(instruction.toLowerCase());
            if(previous_check == CREATE_TABLE)
                param = currentDatabase;
            else
                param = ".";
            int p = checkSyntaxWithPLY(petition, param);
            oos.writeInt(p);
            oos.flush();
            oos.writeUTF(petition);
            oos.flush();
            int result = ois.readInt();
            String log;
            if(result == SUCCESS)
                log = petition+" ----------- SUCCESS";
            else
                log = petition+" ----------- FAILURE";
            eventsLogArea.append(log);
            // Get additional information from the server
            addResultToLog(p,result);
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
    
    /**
     * This functions attempts to match the principal expression of the SQL
     * petition to server.
     **/
    int previousCheck(String instruction){
        switch(instruction){
            case "create table":
                return CREATE_TABLE;
            default:
                return -1;
        }
    }
    
    void addResultToLog(int petition, int result){
        try{
            String log = "";
            switch(petition){
                case SHOW_DATABASES:
                    
                    ArrayList<String> names = (ArrayList<String>)ois.readObject();
                    log += "\nResult:\n";
                    
                    if(names.isEmpty()){
                       log += "- No databases in the server.\n"; 
                       eventsLogArea.append(log);
                       break;
                    }
                        
                    for(String name : names)
                        log += "- "+name+"\n";
                    
                    eventsLogArea.append(log);
                    break;
                    
                case SHOW_TABLES:
                    
                    if(result == FAILURE){
                        log += ois.readUTF();
                        eventsLogArea.append(log);
                        break;
                    }
                    
                    names = (ArrayList<String>)ois.readObject();
                    log += "\nResult:\n";
                    
                    if(names.size() == 0){
                       log += "No tables found in the current database.\n"; 
                    }
                        
                    for(String name : names)
                        log += "\t"+name+"\n";
                    
                    eventsLogArea.append(log);
                    break;
                case CREATE_DATABASE:
                case DROP_DATABASE:
                    String addInfo = ois.readUTF();
                    log += " "+addInfo+"\n";
                    eventsLogArea.append(log);
                    if(result == SUCCESS)
                        setDatabasesList();
                    break;
                case USE_DATABASE:
                    addInfo = ois.readUTF();
                    if(result == SUCCESS)
                        currentDatabase = ois.readUTF();
                    log += " "+addInfo+"\n";
                    eventsLogArea.append(log);
                    break;
                case SELECT:
                    addInfo = ois.readUTF();
                    log += " "+addInfo+"\n";
                    eventsLogArea.append(log);
                    if(result == SUCCESS){
                        DefaultTableModel d = (DefaultTableModel)ois.readObject();
                        TableResults queryResults = new TableResults(d);
                        queryResults.setVisible(true);
                    }
                    break;
                default:
                    addInfo = ois.readUTF();
                    log += " "+addInfo+"\n";
                    eventsLogArea.append(log);
                    break;
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    /**
     * This function match a string with the regular expressions of the supported
     * SQL instruccions in this Database Manager. 
     * Returns the petition constant if the string matched with the regex of
     * an instruction, or the UNKNOWN_PETITION constant wheter the string
     * couldn't match with any regex.
     **/
    /*s
    public int matchPetition(String petition){
        Matcher m;
        boolean b;
        m = p1.matcher(petition);
        if(m.matches())
            return CREATE_DATABASE;
        m = p2.matcher(petition);
        if(m.matches())
            return DROP_DATABASE;
        m = p3.matcher(petition);
        if(m.matches())
            return USE_DATABASE;
        m = p4.matcher(petition);
        if(m.matches())
            return CREATE_TABLE;
        m = p5.matcher(petition);
        if(m.matches())
            return DROP_TABLE;
        m = p6.matcher(petition);
        if(m.matches())
            return INSERT;
        m = p7.matcher(petition);
        if(m.matches())
            return SHOW_DATABASES;
        m = p8.matcher(petition);
        if(m.matches())
            return SHOW_TABLES;
        m = p9.matcher(petition);
        if(m.matches())
            return UPDATE;
        m = p10.matcher(petition);
        if(m.matches())
            return DELETE;
        m = p11.matcher(petition);
        if(m.matches())
            return SELECT;
        else
            return UNKNOWN_PETITION;
    }*/
    
    
    /**
     * This function sets the Workbench icon to the Workbench Frame.
     **/
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("img/icon.png")));
    }
    
    /**
     * This function read all the available databases in the server, an show them
     * in the JTree of the Workbench frame.
     **/
    public void setDatabasesList() {
        
        try{
            
            // Read from the server the available databases
            int numDatabases = ois.readInt();
            ArrayList<String> availableDatabases = new ArrayList<>();
            
            for(int i = 0; i < numDatabases; i++){
                
                availableDatabases.add(ois.readUTF());
                
            }
            
            // Set them into the tree
            databasesTree.removeAll();
            DefaultTreeModel model = (DefaultTreeModel) databasesTree.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            root.removeAllChildren();
            root.setUserObject("Databases");
            
            for(String db : availableDatabases){
                
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(db);
                root.add(child);
                
            }
            
            model.setRoot(root);
            databasesTree.setModel(model);
            
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    /**
     * This function closes the Input and Output socket streams and the socket
     * itself.
     **/
    public void closeConnection() {
        
        try{
            
            // Send the close flag to the server
            oos.writeInt(CLOSE_CONNECTION);
            oos.flush();
            oos.close();
            ois.close();
            cl.close();
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }

    /**
     * This function attempts to connect to the server given the host's IP and
     * port number. If the connection is succesful, set the status flag to 1, or
     * to 0 wether it isn't.
     **/
    public void connect() {
        try{
            cl = new Socket(this.host,this.port);
            if(!this.cl.isConnected()){
                status = 0;
                cl.close();
                return;
            }
            status = 1;
            oos = new ObjectOutputStream(cl.getOutputStream());
            oos.flush();
            ois = new ObjectInputStream(cl.getInputStream());
            JOptionPane.showMessageDialog(null,"You've been connected succesfully","Connection Succesful", JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel caretPositionLabel;
    private javax.swing.JButton clearEventLogButton;
    private javax.swing.JTree databasesTree;
    private javax.swing.JTextArea eventsLogArea;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem runAllMenuItem;
    private javax.swing.JMenuItem runCurrentLineMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JTextArea scriptArea;
    // End of variables declaration//GEN-END:variables
    
}
